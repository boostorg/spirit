#==============================================================================
#   Copyright (c) 2001-2013 Joel de Guzman
#   Copyright (c) 2001-2012 Hartmut Kaiser
#   Copyright (c)      2011 Bryce Lelbach
#
#   Use, modification and distribution is subject to the Boost Software
#   License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#   http://www.boost.org/LICENSE_1_0.txt)
#==============================================================================

# bring in rules for testing
import testing ;
import modules ;
import feature ;

###############################################################################
project spirit_test
    : requirements
        <include>.
        <toolset>gcc:<cxxflags>-std=c++0x
        <toolset>gcc:<cxxflags>-ftemplate-depth-512
        <toolset>clang:<cxxflags>-std=c++1y
        <toolset>clang:<cxxflags>-ftemplate-depth-512
        <toolset>darwin:<cxxflags>-std=c++1y
        <toolset>darwin:<cxxflags>-ftemplate-depth-512
    :
    :
    ;

tests = ;

rule run ( sources + : args * : input-files * : requirements * : target-name ? :  default-build * )
{
    target-name ?= $(sources[1]:D=:S=) ;
    tests += [ testing.run $(sources) : $(args)
      : $(input-files) : $(requirements) : $(target-name)-p3 : $(default-build) ] ;
}

rule compile ( sources + : requirements * : target-name ? )
{
    target-name ?= $(sources[1]:D=:S=) ;
    tests += [ testing.compile $(sources) : $(requirements) : $(target-name)-p3 ] ;
}

rule compile-fail ( sources + : requirements * : target-name ? )
{
    target-name ?= $(sources[1]:D=:S=) ;
    tests += [ testing.compile-fail $(sources) : $(requirements) : $(target-name)-p3 ] ;
}

###############################################################################

{
    ###########################################################################
    test-suite spirit_v3/qi :

     [ run actions.cpp          : : : : x3_actions ]
     #~ [ run actions2.cpp         : : : : x3_actions2 ]
     [ run alternative.cpp      : : : : x3_alternative ]
     [ run and_predicate.cpp    : : : : x3_and_predicate ]
     [ run any_parser.cpp    : : : : x3_any_parser ]
     [ run attr.cpp             : : : : x3_attr ]
     #~ [ run attribute1.cpp       : : : : x3_attribute1 ]
     #~ [ run attribute2.cpp       : : : : x3_attribute2 ]
     #~ [ run auto.cpp             : : : : x3_auto ]
     #~ [ run binary.cpp           : : : : x3_binary ]
     #~ [ run bool1.cpp            : : : : x3_bool1 ]
     #~ [ run bool2.cpp            : : : : x3_bool2 ]
     [ run char1.cpp            : : : : x3_char1 ]
     #~ [ run char2.cpp            : : : : x3_char2 ]
     [ run char_class.cpp       : : : : x3_char_class ]
     [ run debug.cpp            : : : : x3_debug ]
     [ run difference.cpp       : : : : x3_difference ]
     #~ [ run encoding.cpp         : : : : x3_encoding ]
     [ run eoi.cpp              : : : : x3_eoi ]
     [ run eol.cpp              : : : : x3_eol ]
     [ run eps.cpp              : : : : x3_eps ]
     [ run expect.cpp           : : : : x3_expect ]
     #~ [ run grammar.cpp          : : : : x3_grammar ]
     [ run int1.cpp             : : : : x3_int1 ]
     #~ [ run int2.cpp             : : : : x3_int2 ]
     #~ [ run int3.cpp             : : : : x3_int3 ]
     [ run kleene.cpp           : : : : x3_kleene ]
     #~ [ run lazy.cpp             : : : : x3_lazy ]
     [ run lexeme.cpp           : : : : x3_lexeme ]
     #~ [ run lit1.cpp             : : : : x3_lit1 ]
     #~ [ run lit2.cpp             : : : : x3_lit2 ]
     [ run list.cpp             : : : : x3_list ]
     #~ [ run hold.cpp             : : : : x3_hold ]
     #~ [ run match_manip1.cpp     : : : : x3_match_manip1 ]
     #~ [ run match_manip2.cpp     : : : : x3_match_manip2 ]
     #~ [ run match_manip3.cpp     : : : : x3_match_manip3 ]
     #~ [ run match_manip_attr.cpp : : : : x3_match_manip_attr ]
     #~ [ run matches.cpp          : : : : x3_matches ]
     #~ [ run no_case.cpp          : : : : x3_no_case ]
     [ run no_skip.cpp          : : : : x3_no_skip ]
     [ run not_predicate.cpp    : : : : x3_not_predicate ]
     [ run optional.cpp         : : : : x3_optional ]
     #~ [ run parse_attr.cpp       : : : : x3_parse_attr ]
     #~ [ run pass_container1.cpp  : : : : x3_pass_container1 ]
     #~ [ run pass_container2.cpp  : : : : x3_pass_container2 ]
     #~ [ run permutation.cpp      : : : : x3_permutation ]
     [ run plus.cpp             : : : : x3_plus ]

     # $$$ remove this fpermissive flag once lexical_cast is fixed $$$
     #~ [ run range_run.cpp
        #~ : : : <toolset>gcc:<cxxflags>-fpermissive
                                   #~ : x3_range_run ]

     #~ [ run raw.cpp              : : : : x3_raw ]
     [ run real1.cpp            : : : : x3_real1 ]
     [ run real2.cpp            : : : : x3_real2 ]
     [ run real3.cpp            : : : : x3_real3 ]
     [ run real4.cpp            : : : : x3_real4 ]
     # [ run real5.cpp            : : : : x3_real5 ]
     # [ run repeat.cpp           : : : : x3_repeat ]
     [ run rule1.cpp            : : : : x3_rule1 ]
     [ run rule2.cpp            : : : : x3_rule2 ]
     [ run rule3.cpp            : : : : x3_rule3 ]
     [ run rule4.cpp            : : : : x3_rule4 ]
     [ run sequence.cpp         : : : : x3_sequence ]
     #~ [ run sequential_or.cpp    : : : : x3_sequential_or ]
     [ run skip.cpp             : : : : x3_skip ]
     #~ [ run stream.cpp           : : : : x3_stream ]
     [ run symbols1.cpp         : : : : x3_symbols1 ]
     [ run symbols2.cpp         : : : : x3_symbols2 ]
     [ run symbols3.cpp         : : : : x3_symbols3 ]
     #~ [ run terminal_ex.cpp      : : : : x3_terminal_ex ]
     [ run tst.cpp
       $(BOOST_ROOT)/libs/system/build//boost_system
                                   : : : : x3_tst ]
     [ run uint1.cpp            : : : : x3_uint1 ]
     #~ [ run uint2.cpp            : : : : x3_uint2 ]
     #~ [ run uint3.cpp            : : : : x3_uint3 ]
     [ run uint_radix.cpp       : : : : x3_uint_radix ]
     #~ [ run utree1.cpp           : : : : x3_utree1 ]
     #~ [ run utree2.cpp           : : : : x3_utree2 ]
     #~ [ run utree3.cpp           : : : : x3_utree3 ]
     #~ [ run utree4.cpp           : : : : x3_utree4 ]

    ;

    #~ ###########################################################################
    #~ test-suite spirit_v3/x3_regressions :

     #~ [ compile pass_container3.cpp                             : : x3_pass_container3 ]
     #~ [ compile regression_attr_with_action.cpp                 : : x3_regression_attr_with_action ]
     #~ [ compile regression_container_attribute.cpp              : : x3_regression_container_attribute ]
     #~ [ compile regression_debug_optional.cpp                   : : x3_regression_debug_optional ]
     #~ [ compile regression_one_element_fusion_sequence.cpp      : : x3_regression_one_element_fusion_sequence ]
     #~ [ compile regression_one_element_sequence_attribute.cpp   : : x3_regression_one_element_sequence_attribute ]

     #~ [ run regression_adapt_adt.cpp                            : : : : x3_regression_adapt_adt ]
     #~ [ run regression_clear.cpp                                : : : : x3_regression_clear ]
     #~ #[ run regression_float_fraction.cpp                      : : : : x3_regression_float_fraction ]
     #~ [ run regression_lazy_repeat.cpp                          : : : : x3_regression_lazy_repeat ]
     #~ [ run regression_numeric_alternatives.cpp                 : : : : x3_regression_numeric_alternatives ]
     #~ [ run regression_reorder.cpp                              : : : : x3_regression_reorder ]
     #~ [ run regression_repeat.cpp                               : : : : x3_regression_repeat ]
     #~ [ run regression_transform_assignment.cpp                 : : : : x3_regression_transform_assignment ]
     #~ [ run regression_binary_action.cpp                        : : : : x3_regression_binary_action ]
    #~ ;

    #~ ###########################################################################
    #~ test-suite spirit_v3/karma :

     #~ [ compile-fail karma/grammar_fail.cpp         : : karma_grammar_fail ]
     #~ [ compile-fail karma/rule_fail.cpp            : : karma_rule_fail ]
     #~ [ run karma/actions.cpp                   : : : : karma_actions ]
     #~ [ run karma/alternative1.cpp              : : : : karma_alternative1 ]
     #~ [ run karma/alternative2.cpp              : : : : karma_alternative2 ]
     #~ [ run karma/and_predicate.cpp             : : : : karma_and_predicate ]
     #~ [ run karma/attribute.cpp                 : : : : karma_attribute ]
     #~ [ run karma/auto1.cpp                     : : : : karma_auto1 ]
     #~ [ run karma/auto2.cpp                     : : : : karma_auto2 ]
     #~ [ run karma/auto3.cpp                     : : : : karma_auto3 ]
     #~ [ run karma/binary1.cpp                   : : : : karma_binary1 ]
     #~ [ run karma/binary2.cpp                   : : : : karma_binary2 ]
     #~ [ run karma/binary3.cpp                   : : : : karma_binary3 ]
     #~ [ run karma/bool.cpp                      : : : : karma_bool ]
     #~ [ run karma/buffer.cpp                    : : : : karma_buffer ]
     #~ [ run karma/case_handling1.cpp            : : : : karma_case_handling1 ]
     #~ [ run karma/case_handling2.cpp            : : : : karma_case_handling2 ]
     #~ [ run karma/case_handling3.cpp            : : : : karma_case_handling3 ]
     #~ [ run karma/center_alignment.cpp          : : : : karma_center_alignment ]
     #~ [ run karma/char1.cpp                     : : : : karma_char1 ]
     #~ [ run karma/char2.cpp                     : : : : karma_char2 ]
     #~ [ run karma/char3.cpp                     : : : : karma_char3 ]
     #~ [ run karma/char_class.cpp                : : : : karma_char_class ]
     #~ [ run karma/columns.cpp                   : : : : karma_columns ]
     #~ [ run karma/debug.cpp                     : : : : karma_debug ]
     #~ [ run karma/delimiter.cpp                 : : : : karma_delimiter ]
     #~ [ run karma/duplicate.cpp                 : : : : karma_duplicate ]
     #~ [ run karma/encoding.cpp                  : : : : karma_encoding ]
     #~ [ run karma/eol.cpp                       : : : : karma_eol ]
     #~ [ run karma/eps.cpp                       : : : : karma_eps ]
     #~ [ run karma/format_manip.cpp              : : : : karma_format_manip ]
     #~ [ run karma/format_manip_attr.cpp         : : : : karma_format_manip_attr ]
     #~ [ run karma/format_pointer_container.cpp  : : : : karma_format_pointer_container ]
     #~ [ run karma/generate_attr.cpp             : : : : karma_generate_attr ]
     #~ [ run karma/grammar.cpp                   : : : : karma_grammar ]
     #~ [ run karma/int1.cpp                      : : : : karma_int1 ]
     #~ [ run karma/int2.cpp                      : : : : karma_int2 ]
     #~ [ run karma/int3.cpp                      : : : : karma_int3 ]
     #~ [ run karma/kleene.cpp                    : : : : karma_kleene ]
     #~ [ run karma/lazy.cpp                      : : : : karma_lazy ]
     #~ [ run karma/left_alignment.cpp            : : : : karma_left_alignment ]
     #~ [ run karma/list.cpp                      : : : : karma_list ]
     #~ [ run karma/lit.cpp                       : : : : karma_lit ]
     #~ [ run karma/maxwidth.cpp                  : : : : karma_maxwidth ]
     #~ [ run karma/not_predicate.cpp             : : : : karma_not_predicate ]
     #~ [ run karma/omit.cpp                      : : : : karma_omit ]
     #~ [ run karma/optional.cpp                  : : : : karma_optional ]
     #~ [ run karma/pattern1.cpp                  : : : : karma_pattern1 ]
     #~ [ run karma/pattern2.cpp                  : : : : karma_pattern2 ]
     #~ [ run karma/pattern3.cpp                  : : : : karma_pattern3 ]
     #~ [ run karma/pattern4.cpp                  : : : : karma_pattern4 ]
     #~ [ run karma/plus.cpp                      : : : : karma_plus ]
     #~ [ run karma/real1.cpp                     : : : : karma_real1 ]
     #~ [ run karma/real2.cpp                     : : : : karma_real2 ]
     #~ [ run karma/real3.cpp                     : : : : karma_real3 ]
     #~ [ run karma/repeat1.cpp                   : : : : karma_repeat1 ]
     #~ [ run karma/repeat2.cpp                   : : : : karma_repeat2 ]
     #~ [ run karma/right_alignment.cpp           : : : : karma_right_alignment ]
     #~ [ run karma/sequence1.cpp                 : : : : karma_sequence1 ]
     #~ [ run karma/sequence2.cpp                 : : : : karma_sequence2 ]
     #~ [ run karma/stream.cpp                    : : : : karma_stream ]
     #~ [ run karma/symbols1.cpp                  : : : : karma_symbols1 ]
     #~ [ run karma/symbols2.cpp                  : : : : karma_symbols2 ]
     #~ [ run karma/symbols3.cpp                  : : : : karma_symbols3 ]
     #~ [ run karma/tricky_alignment.cpp          : : : : karma_tricky_alignment ]
     #~ [ run karma/uint_radix.cpp                : : : : karma_uint_radix ]
     #~ [ run karma/utree1.cpp                    : : : : karma_utree1 ]
     #~ [ run karma/utree2.cpp                    : : : : karma_utree2 ]
     #~ [ run karma/utree3.cpp                    : : : : karma_utree3 ]
     #~ [ run karma/wstream.cpp                   : : : : karma_wstream ]

    #~ ;

    #~ ###########################################################################
    #~ test-suite spirit_v3/karma_regressions :

     #~ [ compile karma/regression_const_real_policies.cpp    : :  regression_const_real_policies ]

     #~ [ run karma/regression_adapt_adt.cpp                  : : : :  karma_regression_adapt_adt ]
     #~ [ run karma/regression_optional_double.cpp            : : : :  karma_regression_optional_double ]
     #~ [ run karma/regression_semantic_action_attribute.cpp  : : : :  karma_regression_semantic_action_attribute ]
     #~ [ run karma/regression_real_scientific.cpp            : : : :  karma_regression_real_scientific ]
     #~ [ run karma/regression_center_alignment.cpp           : : : :  karma_regression_center_alignment ]
     #~ [ run karma/regression_container_variant_sequence.cpp : : : :  regression_container_variant_sequence ]

    #~ ;

    #~ ###########################################################################
    #~ test-suite spirit_v3/lex :

     #~ [ run lex/auto_switch_lexerstate.cpp    : : : : lex_auto_switch_lexerstate ]
     #~ [ run lex/dedent_handling_phoenix.cpp   : : : : lex_dedent_handling_phoenix ]
     #~ [ run lex/id_type_enum.cpp              : : : : lex_id_type_enum ]
     #~ [ run lex/lexertl1.cpp                  : : : : lex_lexertl1 ]
     #~ [ run lex/lexertl2.cpp                  : : : : lex_lexertl2 ]
     #~ [ run lex/lexertl3.cpp                  : : : : lex_lexertl3 ]
     #~ [ run lex/lexertl4.cpp                  : : : : lex_lexertl4 ]
     #~ [ run lex/lexertl5.cpp                  : : : : lex_lexertl5 ]
     #~ [ run lex/lexer_state_switcher.cpp      : : : : lex_lexer_state_switcher ]
     #~ [ run lex/semantic_actions.cpp          : : : : lex_semantic_actions ]
     #~ [ run lex/set_token_value.cpp           : : : : lex_set_token_value ]
     #~ [ run lex/set_token_value_phoenix.cpp   : : : : lex_set_token_value_phoenix ]
     #~ [ run lex/state_switcher.cpp            : : : : lex_state_switcher ]
     #~ [ run lex/string_token_id.cpp           : : : : lex_string_token_id ]
     #~ [ run lex/token_iterpair.cpp            : : : : lex_token_iterpair ]
     #~ [ run lex/token_moretypes.cpp           : : : : lex_token_moretypes ]
     #~ [ run lex/token_omit.cpp                : : : : lex_token_omit ]
     #~ [ run lex/token_onetype.cpp             : : : : lex_token_onetype ]

    #~ ;

    #~ ###########################################################################
    #~ test-suite spirit_v3/lex_regressions :

     #~ [ run lex/regression_basic_lexer.cpp : : : : lex_regression_basic_lexer ]
     #~ [ run lex/regression_matlib_dynamic.cpp : : : : lex_regression_matlib_dynamic ]
     #~ [ run lex/regression_matlib_generate.cpp : $(LEX_DIR)/matlib_static.h : : : lex_regression_matlib_generate ]
     #~ [ run lex/regression_matlib_static.cpp : : :
       #~ <phoenix_v3>on:<dependency>.//lex_regression_matlib_generate-p3
       #~ <phoenix_v3>off:<dependency>.//lex_regression_matlib_generate-p2
       #~ : lex_regression_matlib_static ]
     #~ [ run lex/regression_matlib_generate_switch.cpp : $(LEX_DIR)/matlib_static_switch.h : : : lex_regression_matlib_generate_switch ]
     #~ [ run lex/regression_matlib_switch.cpp : : :
       #~ <phoenix_v3>on:<dependency>.//lex_regression_matlib_generate_switch-p3
       #~ <phoenix_v3>off:<dependency>.//lex_regression_matlib_generate_switch-p2
         #~ : lex_regression_matlib_switch ]
     #~ [ run lex/regression_word_count.cpp : : : : lex_regression_word_count ]
     #~ [ run lex/regression_syntax_error.cpp : : : : lex_regression_syntax_error ]
     #~ [ run lex/regression_wide.cpp : : : : lex_regression_wide ]
     #~ [ run lex/regression_file_iterator1.cpp : : : : lex_regression_file_iterator1 ]
     #~ [ run lex/regression_file_iterator2.cpp : : : : lex_regression_file_iterator2 ]
     #~ [ run lex/regression_file_iterator3.cpp : : : : lex_regression_file_iterator3 ]
     #~ [ run lex/regression_file_iterator4.cpp : : : : lex_regression_file_iterator4 ]
     #~ [ run lex/regression_static_wide_6253.cpp : : : : regression_static_wide_6253 ]

    #~ ;

    #~ ###########################################################################
    #~ test-suite spirit_v3/support :

     #~ [ run support/utree.cpp                  : : : : support_utree ]
     #~ [ run support/utree_debug.cpp            : : : : support_utree_debug ]

    #~ ;

    #~ ###########################################################################
    #~ test-suite spirit_v3/support_regressions :

     #~ [ compile support/regression_multi_pass_position_iterator.cpp : : support_regression_multi_pass_position_iterator ]
     #~ [ compile support/regression_multi_pass_functor.cpp           : : support_regression_multi_pass_functor ]
     #~ [ compile support/regression_multi_pass_parse.cpp             : : support_regression_multi_pass_parse ]
     #~ [ run support/regression_multi_pass_error_handler.cpp         : : : : regression_multi_pass_error_handler ]

    #~ ;
}

# use this alias to build Spirit against Phoenix V3
#~ alias test_using_phoenix_v3 : $(tests) ;

#~ explicit test_using_phoenix_v3 ;
